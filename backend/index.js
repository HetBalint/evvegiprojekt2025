import express from "express";
import mysql from "mysql2";
import cors from "cors";
//import bcrypt from 'bcrypt';
const salt = 10;
import jwt from 'jsonwebtoken';
import cookieParser from "cookie-parser";
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from "url";
import fs from 'fs';





const __dirname = path.dirname(fileURLToPath(import.meta.url));

const app = express();
app.use(cookieParser());
app.use(cors(
    {
        origin: ["http://localhost:3000"],
        methods: ["POST, GET, PUT, DELETE"],
        credentials: true
    }
));
app.use(express.json());
app.use("/kepek", express.static(path.join(__dirname, "kepek")));
app.use("/3D", express.static(path.join(__dirname, "3D")));

//Adatb√°zis kapcsolat
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'evvegiprojekt2025',
});

//AdminPanel

// Adminlista lek√©r√©se az adatb√°zisb√≥l
app.get('/admin/adminlist/', (req, res) => {
    const sql = "SELECT * FROM admin";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});

// Adminlist√°hoz admin hozz√°ad√°sa
app.post('/admin/adminlist/admin', (req, res) => {
    // Form√°zott d√°tum l√©trehoz√°sa
    const formattedDate = new Date(req.body.szulev).toISOString().slice(0, 10);
    

    // SQL lek√©rdez√©s az admin hozz√°ad√°s√°ra
    const sql = "INSERT INTO admin (`nev`,`email`,`jelszo`,`szulev`,`lakhely`,`cim`,`adoszam`,`telszam`) VALUES (?)";
    const values = [
        req.body.nev, 
        req.body.email, 
        req.body.jelszo, 
        formattedDate,  // Haszn√°ljuk a form√°zott d√°tumot
        req.body.lakhely, 
        req.body.cim, 
        req.body.adoszam, 
        req.body.telszam
    ];

    db.query(sql, [values], (err, result) => {
        if (err) {
            console.error("SQL Hiba:", err);
            return res.json(err);
        }
        return res.json(result);
    });
});


// Adminlista admin szerkeszt√©se lista
app.get('/admin/adminlist/edit/:id', (req, res) => {
    const sql = "SELECT * FROM admin WHERE ID = ?";
    const id = req.params.id;

    db.query(sql, [id], (err, result) => {
        if (err) {
            console.error('Database error:', err);
            return res.json({ Message: "Hiba van a szerverben!" });
        }
        return res.json(result);
    });
});

//Adminlista szerkesztett admin friss√≠t√©se
// Adminlista szerkesztett admin friss√≠t√©se
app.put('/admin/adminlist/update/:id', (req, res) => {
    const sql = "UPDATE admin SET `nev`=?, `email`=?, `jelszo`=?, `szulev`=?, `lakhely`=?, `cim`=?, `adoszam`=?, `telszam`=? WHERE id=?";
    const id = req.params.id;
    
    // Ellen≈ërz√©s a be√©rkez≈ë adatokra
    if (!req.body.nev || !req.body.email || !req.body.jelszo || !req.body.szulev || !req.body.lakhely || !req.body.cim || !req.body.adoszam || !req.body.telszam) {
        return res.status(400).json({ Message: "Hi√°nyz√≥ mez≈ëk az ≈±rlapban!" });
    }

    db.query(sql, [
        req.body.nev,
        req.body.email,
        req.body.jelszo,
        req.body.szulev,
        req.body.lakhely,
        req.body.cim,
        req.body.adoszam,
        req.body.telszam,
        id
    ], (err, result) => {
        if (err) {
            console.error('Database error:', err);
            return res.status(500).json({ Message: "Hiba van a szerverben!", Error: err });
        }
        return res.json({ Message: "Sikeres friss√≠t√©s!", result });
    });
});


//Adminlista admin t√∂rl√©se
app.delete('/admin/adminlist/delete/:id', (req, res) => {
    const sql = "DELETE FROM admin WHERE id=?"
    const id = req.params.id;
    db.query(sql, [id], (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
})

// Admin autentik√°ci√≥ Middleware
const verifyAdmin = (req, res, next) => {
    const token = req.cookies.adminToken; // üî• Admin token el√©r√©se a s√ºtib≈ël

    if (!token) {
        return res.status(401).json({ message: "Token nem egyezik" });
    }

    jwt.verify(token, "adminSecretKey", (err, decoded) => {
        if (err) {
            return res.status(403).json({ message: "Nincs hiteles√≠tve" });
        }

        req.nev = decoded.nev;
        next();
    });
};

// Admin bejelentkez√©s √©s JWT gener√°l√°s
app.post('/admin/login', (req, res) => {
    const sql = "SELECT * FROM admin WHERE `email` = ? AND `jelszo` = ?";
    db.query(sql, [req.body.email, req.body.jelszo], (err, data) => {
        if (err) {
            return res.json("Error");
        }
        if (data.length > 0) {
            const nev = data[0].nev;
            const token = jwt.sign({ nev }, "adminSecretKey", { expiresIn: '1d' });

            // Be√°ll√≠tjuk a HTTP-only JWT s√ºtit adminok sz√°m√°ra
            res.cookie('adminToken', token, {
                httpOnly: true,
                secure: false, // üî• Ha HTTPS-t haszn√°lsz, √°ll√≠tsd true-ra
                sameSite: "lax",
                path: "/",
            });

            return res.json({ Status: "Success" });
        } else {
            return res.json("Failed");
        }
    });
});

//Admin kijelentkez√©s
app.get('/logout', (req, res) => {
    res.cookie('adminToken', '', {
        httpOnly: true,
        secure: false, //  Ha HTTPS-t haszn√°lsz, √°ll√≠tsd "true"-ra
        sameSite: "lax",
        expires: new Date(0) //  A s√ºti azonnali lej√°rata
    });

    res.clearCookie('adminToken'); //  A s√ºti biztos t√∂rl√©se
    return res.json({ Status: "Success" });
});

// üî• Admin v√©dett v√©gpont - csak bejelentkezett adminok f√©rhetnek hozz√°
app.get('/admin', verifyAdmin, (req, res) => {
    return res.json({ Status: "Success", nev: req.nev });
});

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//K√©p √©s 3D hozz√°ad√°sa
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        if (file.fieldname === "kep") {
            cb(null, "./kepek"); // K√©p ment√©se a "kepek" mapp√°ba
        } else if (file.fieldname === "haromD") {
            cb(null, "./3D"); // 3D f√°jl ment√©se a "3D" mapp√°ba
        } else {
            cb(new Error("Invalid file fieldname")); // Hiba, ha m√°s mez≈ënevet haszn√°l
        }
    },
    filename: function (req, file, cb) {
        cb(null, `${Date.now()}_${file.originalname}`);
    }
});

// Egyetlen `upload` middleware, ami t√∂bb f√°jlt is kezel
const upload = multer({ storage });



//Term√©k hozz√°ad√°sa
app.post('/admin/productlist/product', upload.fields([
    { name: 'kep', maxCount: 1 },
    { name: 'haromD', maxCount: 1 }
]), (req, res) => {
    const sql = "INSERT INTO termekek (`nev`, `ar`, `suly`, `anyag`, `leiras`, `meret`, `kategoriaID`, `kep`, `keszlet`, `haromD`) VALUES (?)";

    const values = [
        req.body.nev,
        req.body.ar,
        req.body.suly,
        req.body.anyag,
        req.body.leiras,
        req.body.meret,
        req.body.kategoria,
        req.files['kep'] ? req.files['kep'][0].filename : null,  // K√©p ment√©se
        req.body.keszlet,
        req.files['haromD'] ? req.files['haromD'][0].filename : null  // 3D f√°jl ment√©se
    ];

    db.query(sql, [values], (err, result) => {
        if (err) {
            console.error("SQL Hiba:", err);
            return res.status(500).json({ Error: "Hiba a felt√∂lt√©s sor√°n", Details: err.sqlMessage });
        }
        return res.json({ Status: "Success", InsertedID: result.insertId });
    });
});


                  

//Term√©k kateg√≥ri√°k lek√©r√©se
app.get('/admin/kategoriak/', (req, res) => {
    const sql = "SELECT id, nev FROM kategoria";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});
  






// Term√©kLista lek√©r√©se az adatb√°zisb√≥l
app.get('/admin/productlist/', (req, res) => {
    const sql = "SELECT * FROM termekek ORDER BY id DESC";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});


// Term√©klista term√©k szerkeszt√©se
app.get('/admin/productlist/pedit/:id', (req, res) => {
    const sql = "SELECT * FROM termekek WHERE ID = ?";
    const id = req.params.id;

    db.query(sql, [id], (err, result) => {
        if (err) {
            console.error('Database error:', err);
            return res.json({ Message: "Hiba van a szerverben!" });
        }
        return res.json(result);
    });
});



// Term√©klista szerkesztett term√©k friss√≠t√©se (K√©p + 3D f√°jl t√°mogat√°s)
app.put('/admin/productlist/update/:id', upload.fields([
    { name: 'kep', maxCount: 1 },
    { name: 'haromD', maxCount: 1 }
]), (req, res) => {
    const sqlSelect = "SELECT kep, haromD FROM termekek WHERE id = ?";

    // El≈ësz√∂r lek√©rdezz√ºk az adatb√°zisb√≥l a r√©gi f√°jlok nev√©t
    db.query(sqlSelect, [req.params.id], (err, result) => {
        if (err) {
            console.error("SQL Hiba:", err);
            return res.status(500).json({ Message: "Hiba a lek√©rdez√©s sor√°n", Error: err.sqlMessage });
        }

        // Ha van eredm√©ny, lek√©rj√ºk a megl√©v≈ë f√°jlok neveit
        const oldKep = result.length > 0 ? result[0].kep : null;
        const oldHaromD = result.length > 0 ? result[0].haromD : null;

        // √öj f√°jlok ment√©se (ha vannak), k√ºl√∂nben marad a r√©gi
        const newKep = req.files['kep'] ? req.files['kep'][0].filename : req.body.regikep;
        const newHaromD = req.files['haromD'] ? req.files['haromD'][0].filename : req.body.regiharomD;

        // Ha van √∫j k√©p, t√∂r√∂lj√ºk a r√©git
        if (req.files['kep'] && oldKep) {
            const filePath = path.join(__dirname, 'kepek', oldKep);
            fs.unlink(filePath, (err) => {
                if (err) console.error("K√©p t√∂rl√©s hiba:", err);
            });
        }

        // Ha van √∫j 3D f√°jl, t√∂r√∂lj√ºk a r√©git
        if (req.files['haromD'] && oldHaromD) {
            const filePath3D = path.join(__dirname, '3D', oldHaromD);
            fs.unlink(filePath3D, (err) => {
                if (err) console.error("3D f√°jl t√∂rl√©s hiba:", err);
            });
        }

        // Friss√≠tj√ºk az adatb√°zist az √∫j vagy r√©gi f√°jlokkal
        const sqlUpdate = "UPDATE termekek SET `nev` = ?, `ar` = ?, `suly` = ?, `anyag` = ?, `leiras` = ?, `meret` = ?, `kategoriaID` = ?, `kep` = ?, `keszlet` = ?, `haromD` = ? WHERE id = ?";

        db.query(sqlUpdate, [
            req.body.nev,
            req.body.ar,
            req.body.suly,
            req.body.anyag,
            req.body.leiras,
            req.body.meret,
            req.body.kategoria,
            newKep,      // K√©p (√∫j vagy r√©gi)
            req.body.keszlet,
            newHaromD,   // 3D f√°jl (√∫j vagy r√©gi)
            req.params.id
        ], (err, result) => {
            if (err) {
                console.error("SQL Hiba:", err);
                return res.status(500).json({ Message: "Hiba a friss√≠t√©s sor√°n", Error: err.sqlMessage });
            }
            return res.json({ Message: "Sikeres friss√≠t√©s!", Data: result });
        });
    });
});



//Term√©klista term√©k t√∂rl√©se
app.delete('/admin/productlist/delete/:id', (req, res) => {
    const id = req.params.id;
    
    // El≈ësz√∂r lek√©rdezz√ºk az adatb√°zisb√≥l a f√°jl nev√©t
    const sqlSelect = "SELECT kep FROM termekek WHERE id = ?";
    db.query(sqlSelect, [id], (err, result) => {
        if (err) {
            return res.status(500).json({ Message: "Hiba a lek√©rdez√©s sor√°n!" });
        }
        
        // Ha van f√°jl neve, t√∂r√∂lj√ºk azt
        if (result.length > 0 && result[0].kep) {
            const filePath = path.join(__dirname, 'kepek', result[0].kep); // A f√°jl el√©r√©si √∫tja

            // Pr√≥b√°ljuk meg t√∂r√∂lni a f√°jlt
            fs.unlink(filePath, (err) => {
                if (err) {
                    console.error("F√°jl t√∂rl√©s hiba:", err);
                    return res.status(500).json({ Message: "Hiba a f√°jl t√∂rl√©se sor√°n" });
                }
                
            });
        }

        // Most t√∂r√∂lj√ºk az adatb√°zisb√≥l a rekordot
        const sqlDelete = "DELETE FROM termekek WHERE id=?";
        db.query(sqlDelete, [id], (err, result) => {
            if (err) {
                console.error("SQL hiba:", err);
                return res.status(500).json({ Message: "Hiba a term√©k t√∂rl√©s√©ben!" });
            }
            return res.json({ Message: "Term√©k √©s k√©p t√∂r√∂lve!" });
        });
    });
});



// Minden rendel√©s lek√©rdez√©se admin oldalra
app.get("/rendeleskezeles", (req, res) => {
    const rendelesekQuery = `
      SELECT * FROM rendelesek
      ORDER BY ido DESC
    `;
  
    db.query(rendelesekQuery, (err, rendelesek) => {
      if (err) {
        console.error("Hiba a rendelesek lekerese soran:", err);
        return res.status(500).json({ message: "Hiba a rendelesek lek√©r√©sekor!" });
      }
  
      if (rendelesek.length === 0) {
        return res.json([]);
      }
  
      const rendelesIds = rendelesek.map(r => r.id);
  
      const tetelekQuery = `
        SELECT rt.*, t.nev AS termekNev FROM rendeles_tetelek rt
        JOIN termekek t ON rt.termek_id = t.id
        WHERE rt.rendeles_id IN (?)
      `;
  
      db.query(tetelekQuery, [rendelesIds], (err, tetelek) => {
        if (err) {
          console.error("Hiba a rendeles_tetelek lekerese soran:", err);
          return res.status(500).json({ message: "Hiba a rendeles t√©telek lek√©r√©sekor!" });
        }
  
        const rendelesekWithTetelek = rendelesek.map(r => ({
          ...r,
          tetelek: tetelek.filter(t => t.rendeles_id === r.id)
        }));
  
        res.json(rendelesekWithTetelek);
      });
    });
  });
  
  // Rendel√©s statusz friss√≠t√©se
  app.put("/admin/rendelesek/frissit/:id", (req, res) => {
    const { id } = req.params;
    const { statusz } = req.body;
  
    const updateQuery = "UPDATE rendelesek SET statusz = ? WHERE id = ?";
    db.query(updateQuery, [statusz, id], (err, result) => {
      if (err) {
        console.error("Hiba a rendel√©s statusz friss√≠t√©sekor:", err);
        return res.status(500).json({ error: "Statusz friss√≠t√©si hiba" });
      }
  
      res.json({ message: "Statusz sikeresen friss√≠tve!" });
    });
  });
  

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Userlista lek√©r√©se az adatb√°zisb√≥l
app.get('/admin/userlist/', (req, res) => {
    const sql = "SELECT * FROM vasarlok";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});

// Userlist√°hoz user hozz√°ad√°sa
app.post('/admin/userlist/user', (req, res) => {

    

    // SQL lek√©rdez√©s az user hozz√°ad√°s√°ra
    const sql = "INSERT INTO vasarlok (`nev`,`email`,`jelszo`,`usertel`) VALUES (?)";
    const values = [
        req.body.nev, 
        req.body.email, 
        req.body.jelszo, 
        req.body.usertel
    ];

    db.query(sql, [values], (err, result) => {
        if (err) {
            console.error("SQL Hiba:", err);
            return res.json(err);
        }
        return res.json(result);
    });
});



// User autentik√°ci√≥ Middleware
const verifyUser = (req, res, next) => {
    const token = req.cookies.userToken; // Ellen≈ërizz√ºk a s√ºtib≈ël

    if (!token) {
        return res.status(401).json({ message: "Token nem egyezik" });
    } 
    
    jwt.verify(token, "userSecretKey", (err, decoded) => {
        if (err) {
            return res.status(403).json({ message: "Nincs hiteles√≠tve" });
        } 
        
        req.id = decoded.id
        req.nev = decoded.nev;
        req.email = decoded.email;
        req.usertel = decoded.usertel;
        next();
    });
};




//User bejelentkez√©s
app.post('/user/login', (req, res) => {
    const sql = "SELECT * FROM vasarlok WHERE `email` = ? AND `jelszo` = ?";
    db.query(sql, [req.body.email, req.body.jelszo], (err, data) => {
        if (err) {
            return res.json("Error");
        }
        if (data.length > 0) {
            const { id, nev, email, usertel } = data[0]; // üî• Hozz√°adjuk az emailt √©s telefonsz√°mot is
            const token = jwt.sign({ id, nev, email, usertel }, "userSecretKey", { expiresIn: '1d' });

            res.cookie('userToken', token, {
                httpOnly: true,
                secure: false, // üî• Ha HTTPS-t haszn√°lsz, √°ll√≠tsd true-ra
                sameSite: "lax"
            });

            return res.json({ Status: "Success" });
        } else {
            return res.json("Failed");
        }
    });
});


// User kijelentkez√©s
app.get('/user/logout', (req, res) => {
    res.cookie('userToken', '', {
        httpOnly: true,
        secure: false, //  Ha HTTPS-t haszn√°lsz, √°ll√≠tsd "true"-ra
        sameSite: "lax",
        expires: new Date(0), //  A s√ºti azonnali lej√°rata
        path: "/",
    });

    res.clearCookie('userToken'); //  A s√ºti biztos t√∂rl√©se
    return res.json({ Status: "Success" });
});

app.get('/user', verifyUser ,(req, res) => {
    return res.json({Status: "Success", id: req.id, nev: req.nev, email: req.email, usertel: req.usertel})
})


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//Gy≈±r≈± oldal gy≈±r≈± lista
app.get('/gyuruk', (req, res) => {
    const sql = "SELECT * FROM termekek WHERE kategoriaID = 1";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});


//Nyakl√°nc oldal nyakl√°nc lista
app.get('/nyaklancok', (req, res) => {
    const sql = "SELECT * FROM termekek WHERE kategoriaID = 2";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});


//Karl√°nc oldal karl√°nc lista
app.get('/karlancok', (req, res) => {
    const sql = "SELECT * FROM termekek WHERE kategoriaID = 3";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});


//F√ºlbeval√≥ oldal f√ºlbeval√≥ lista
app.get('/fulbevalok', (req, res) => {
    const sql = "SELECT * FROM termekek WHERE kategoriaID = 4";
    db.query(sql, (err, result) => {
        if (err) return res.json({ Message: "Hiba van a szerverben!" });
        return res.json(result);
    });
});

//Kiv√°lasztott term√©k megtekint√©se
app.get('/termek/:id', (req, res) => {
    const sql = `
        SELECT 
            termekek.id AS termekID, 
            termekek.nev AS termekNev, 
            termekek.keszlet,
            termekek.ar, 
            termekek.suly, 
            termekek.anyag, 
            termekek.leiras, 
            termekek.meret, 
            termekek.kep, 
            kategoria.nev AS kategoriaNev
        FROM termekek
        JOIN kategoria ON termekek.kategoriaID = kategoria.id
        WHERE termekek.id = ?`;

    db.query(sql, [req.params.id], (err, result) => {
        if (err) {
            console.error("Hiba t√∂rt√©nt a term√©k lek√©rdez√©sekor:", err);
            return res.status(500).json({ message: "Hiba a szerveren!", error: err.sqlMessage });
        }
        return res.json(result);
    });
});


// Kos√°rhoz ad√°s v√©gpont
app.post("/kosar/termek", (req, res) => {
    const { termekId, nev, meret, mennyiseg, ar, kep, anyag } = req.body;

    if (!termekId || !nev || !meret || !mennyiseg || !ar || !kep || !anyag) {
        return res.status(400).json({ error: "Minden mez≈ë k√∂telez≈ë!" });
    }

    // V√©g√∂sszeg kisz√°m√≠t√°sa (√°r * darabsz√°m)
    const vegosszeg = ar * mennyiseg;

    // SQL INSERT lek√©rdez√©s
    const sql = `
        INSERT INTO kosar (termekID, termekNev, termekMeret, dbszam, termekAr, termekKep, vegosszeg, termekAnyag) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `;

    const values = [termekId, nev, meret, mennyiseg, ar, kep, vegosszeg, anyag];

    db.query(sql, values, (err, result) => {
        if (err) {
            console.error("Hiba a term√©k kos√°rba helyez√©sekor:", err);
            return res.status(500).json({ error: "Szerverhiba a term√©k kos√°rba helyez√©sekor." });
        }
        res.json({ message: "Term√©k sikeresen hozz√°adva a kos√°rhoz!", termekId: result.insertId });
    });
});



// Kos√°r lek√©rdez√©se (GET)
app.get("/kosar", (req, res) => {
    const sql = `
        SELECT 
            k.termekID, 
            k.termekNev, 
            k.termekMeret, 
            k.dbszam, 
            k.termekAr, 
            k.termekKep, 
            k.vegosszeg, 
            k.termekAnyag,
            t.keszlet
        FROM kosar k
        JOIN termekek t ON k.termekID = t.id
    `;
    
    db.query(sql, (err, result) => {
        if (err) {
            console.error("Hiba a kos√°r lek√©rdez√©sekor:", err);
            return res.status(500).json({ error: "Hiba t√∂rt√©nt a kos√°r lek√©rdez√©sekor" });
        }
        res.json(result);
    });
});



//Kos√°rb√≥l term√©k t√∂rl√©se
app.delete('/kosar/delete/:id', (req, res) => {
    const sql = "DELETE FROM kosar WHERE termekID = ?";
    const id = req.params.id;
    
    db.query(sql, [id], (err, result) => {
        if (err) {
            console.error("Hiba a term√©k t√∂rl√©sekor:", err);
            return res.status(500).json({ message: "Hiba van a szerverben!" });
        }

        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "A term√©k nem tal√°lhat√≥ a kos√°rban!" });
        }

        return res.json({ message: "Term√©k sikeresen t√∂r√∂lve a kos√°rb√≥l!" });
    });
});

//Kos√°rban a term√©k darabsz√°m√°nak n√∂vel√©se vagy cs√∂kkent√©se √©s ment√©se az adatb√°zisba
app.put("/kosar/update/:id", (req, res) => {
    const { id } = req.params;
    const { action } = req.body;

    let query = "";
    if (action === "increase") {
        query = "UPDATE kosar SET dbszam = dbszam + 1 WHERE termekID = ?";
    } else if (action === "decrease") {
        query = "UPDATE kosar SET dbszam = GREATEST(dbszam - 1, 1) WHERE termekID = ?";
    } else {
        return res.status(400).json({ error: "√ârv√©nytelen m≈±velet!" });
    }

    db.query(query, [id], (err, result) => {
        if (err) return res.status(500).json({ error: "Hiba a friss√≠t√©s sor√°n!" });
        res.json({ message: "Mennyis√©g friss√≠tve!", updatedId: id });
    });
});


//3D megjelen√≠t√©se a term√©kmegtekint≈ëbe
app.get('/termek/:id/3D', (req, res) => {
    const sql = "SELECT haromD FROM termekek WHERE id = ?";
    db.query(sql, [req.params.id], (err, result) => {
        if (err) {
            console.error("Hiba a 3D f√°jl lek√©r√©sekor:", err);
            return res.status(500).json({ error: "Hiba a szerveren!" });
        }

        if (result.length > 0 && result[0].haromD) {
            return res.json({ haromD: `http://localhost:8081/3D/${result[0].haromD}` }); // üîπ K√ºldj√ºk az el√©r√©si √∫tvonalat
        } else {
            return res.status(404).json({ error: "Nincs 3D f√°jl!" });
        }
    });
});


// Rendel√©s lead√°sa (k√©szletfriss√≠t√©ssel)
app.post("/rendeles", verifyUser, (req, res) => {
    console.log("üì© Bej√∂v≈ë rendel√©s √©rkezett!");

    const vasarloId = req.id;
    const items = req.body.items;
    const totalPrice = req.body.total;

    if (!items || items.length === 0) {
        return res.status(400).json({ error: "A kos√°r √ºres!" });
    }

    const insertOrderQuery = `
        INSERT INTO rendelesek (statusz, osszeg, ido, vasarlo_id)
        VALUES (?, ?, NOW(), ?)
    `;

    db.query(insertOrderQuery, ["feldolgoz√°s alatt", totalPrice, vasarloId], (err, result) => {
        if (err) {
            console.error("‚ùå Rendel√©s besz√∫r√°si hiba:", err);
            return res.status(500).json({ error: "Rendel√©s besz√∫r√°si hiba" });
        }

        const rendelesId = result.insertId;
        console.log("üìù Rendel√©s ID:", rendelesId);

        const orderItems = items.map(item => [
            rendelesId,
            item.termekID,
            item.dbszam,
            item.termekAr,
            item.dbszam * item.termekAr
        ]);

        const insertItemsQuery = `
            INSERT INTO rendeles_tetelek (rendeles_id, termek_id, dbszam, termekAr, vegosszeg)
            VALUES ?
        `;

        db.query(insertItemsQuery, [orderItems], (err) => {
            if (err) {
                console.error("‚ùå T√©telek besz√∫r√°si hiba:", err);
                return res.status(500).json({ error: "T√©telek besz√∫r√°si hiba" });
            }

            // K√©szlet friss√≠t√©s minden term√©kre
            const frissitesek = items.map(item => {
                return new Promise((resolve, reject) => {
                    const updateQuery = `
                        UPDATE termekek 
                        SET keszlet = CASE 
                            WHEN keszlet >= ? THEN keszlet - ? 
                            ELSE 0 
                        END 
                        WHERE id = ?
                    `;
                    db.query(updateQuery, [item.dbszam, item.dbszam, item.termekID], (err, result) => {
                        if (err) return reject(err);
                        resolve(result);
                    });
                });
            });

            Promise.all(frissitesek)
                .then(() => {
                    // Kos√°r √ºr√≠t√©se
                    db.query("DELETE FROM kosar", (err) => {
                        if (err) {
                            console.error("‚ùå Kos√°r t√∂rl√©s hiba:", err);
                            return res.status(500).json({ error: "Kos√°r t√∂rl√©s hiba" });
                        }

                        console.log("‚úÖ Rendel√©s √©s k√©szlet friss√≠tve!");
                        return res.json({ message: "Rendel√©s sikeres!" });
                    });
                })
                .catch(err => {
                    console.error("‚ùå K√©szletfriss√≠t√©s hiba:", err);
                    return res.status(500).json({ error: "K√©szletfriss√≠t√©si hiba" });
                });
        });
    });
});


// Rendel√©sek lek√©rdez√©se (egy adott felhaszn√°l√≥hoz)
app.get("/rendelesek", verifyUser, (req, res) => {
    const vasarloId = req.id;
  
    const rendelesekQuery = `
      SELECT * FROM rendelesek
      WHERE vasarlo_id = ?
      ORDER BY ido DESC
    `;
  
    db.query(rendelesekQuery, [vasarloId], (err, rendelesek) => {
      if (err) {
        console.error("Hiba a rendelesek lekerese soran:", err);
        return res.status(500).json({ message: "Hiba a rendelesek lek√©r√©sekor!" });
      }
  
      // Ha nincs rendel√©s
      if (rendelesek.length === 0) {
        return res.json([]);
      }
  
      // Rendel√©sek ID-k kigy≈±jt√©se
      const rendelesIds = rendelesek.map(r => r.id);
  
      // T√©telek lek√©rdez√©se
      const tetelekQuery = `
        SELECT rt.*, t.nev AS termekNev FROM rendeles_tetelek rt
        JOIN termekek t ON rt.termek_id = t.id
        WHERE rt.rendeles_id IN (?)
      `;
  
      db.query(tetelekQuery, [rendelesIds], (err, tetelek) => {
        if (err) {
          console.error("Hiba a rendeles_tetelek lekerese soran:", err);
          return res.status(500).json({ message: "Hiba a rendeles t√©telek lek√©r√©sekor!" });
        }
  
        // Rendel√©sekhez hozz√°kapcsoljuk a t√©teleket
        const rendelesekWithTetelek = rendelesek.map(r => ({
          ...r,
          tetelek: tetelek.filter(t => t.rendeles_id === r.id)
        }));
  
        res.json(rendelesekWithTetelek);
      });
    });
  });



// Szerver ind√≠t√°sa
const port = process.env.PORT || 8081;
app.listen(port, () => {
    console.log(`A szerver fut a http://localhost:${port}`);
});
